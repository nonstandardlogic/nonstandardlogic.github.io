{
    "docs": [
        {
            "location": "/",
            "text": "Index",
            "title": "Home"
        },
        {
            "location": "/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/projects/",
            "text": "Projects",
            "title": "Projects"
        },
        {
            "location": "/projects/#projects",
            "text": "",
            "title": "Projects"
        },
        {
            "location": "/articles/k8s-memcached-operator/",
            "text": "Create Project\n\n\n$ mkdir $GOPATH/src/github.com/nonstandardlogic\n$ mkdir $GOPATH/src/github.com/nonstandardlogic/memcached-operator\n$ cd  $GOPATH/src/github.com/memcached-operator\n\n$ operator-sdk init --domain=example.com\nError: failed to initialize project with version \"3-alpha\": error finding current repository: could not determine repository path from module data, package data, or by initializing a module: go: cannot determine module path for source directory /home/serge/go/memcached-operator (outside GOPATH, module path must be specified)\n\n\n\nExample usage:\n        'go mod init example.com/m' to initialize a v0 or v1 module\n        'go mod init example.com/m/v2' to initialize a v2 module\n\n\nThen\n\n\n$ go mod init example.com/m/v2\ngo: creating new go.mod: module example.com/m/v2\n\n\n\nCreate the project\n\n\n$ operator-sdk init --domain example.com --license apache2 --owner \"NSL Team\"\nWriting scaffold for you to edit...\nGet controller runtime:\n$ go get sigs.k8s.io/controller-runtime@v0.6.2\nUpdate go.mod:\n$ go mod tidy\nRunning make:\n$ make\n/home/serge/go/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\ngo build -o bin/manager main.go\nNext: define a resource with:\n$ operator-sdk create api\n\n\n\nCreate API\n\n\n$ operator-sdk create api --group cache --version v1 --kind Memcached --resource=true --controller=true\nWriting scaffold for you to edit...\napi/v1/memcached_types.go\ncontrollers/memcached_controller.go\nRunning make:\n$ make\n/home/serge/go/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\ngo build -o bin/manager main.go\n\n\n$ make manifests\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n\n\n\nInstall Kubebuilder\n\n\n( https://book.kubebuilder.io/quick-start.html)\n\n\ns$ os=$(go env GOOS)\n$ arch=$(go env GOARCH)\n$ curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                Dload  Upload   Total   Spent    Left  Speed\n100    68  100    68    0     0    163      0 --:--:-- --:--:-- --:--:--   163\n100   124  100   124    0     0    272      0 --:--:-- --:--:-- --:--:--   272\n100   649  100   649    0     0    719      0 --:--:-- --:--:-- --:--:--  2021\n100 54.8M  100 54.8M    0     0  3701k      0  0:00:15  0:00:15 --:--:-- 4395k\n\n$ sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder\n$ export PATH=$PATH:/usr/local/kubebuilder/bin\n\n\n\nAPI Definition\n\n\nUpdate the api/v1alpha1/memcached_types.go file:\n    // MemcachedSpec defines the desired state of Memcached\n    type MemcachedSpec struct {\n        // +kubebuilder:validation:Minimum=0\n        // Size is the size of the memcached deployment\n        Size int32 \njson:\"size\"\n\n    }\n\n\n// MemcachedStatus defines the observed state of Memcached\ntype MemcachedStatus struct {\n    // Nodes are the names of the memcached pods\n    Nodes []string `json:\"nodes\"`\n}\n\n\n\nGenerate CRD\n\n\n$ make manifests\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n\n\n\nUpdate CR\n\n\nupdate the CR sample in \nconfig/samples/cache_v1_memcached.yaml\n to set the attribute defined:\n\n\napiVersion: cache.example.com/v1\nkind: Memcached\nmetadata:\nname: memcached-sample\nspec:\n# Add fields here\nsize: 1\n\n\n\nBuilding and pushing to Docker registry\n\n\n$ make docker-build docker-push IMG=nonstandardlogic/memcached-operator\n/home/serge/go/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\ngo test ./... -coverprofile cover.out\n?       github.com/nonstandardlogic/memcached-operator  [no test files]\n?       github.com/nonstandardlogic/memcached-operator/api/v1   [no test files]\nok      github.com/nonstandardlogic/memcached-operator/controllers      5.131s  coverage: 0.0% of statements\ndocker build . -t nonstandardlogic/memcached-operator\nSending build context to Docker daemon  44.48MB\nStep 1/14 : FROM golang:1.13 as builder\n---> d6f3656320fe\nStep 2/14 : WORKDIR /workspace\n...\n1d44b27e08d8: Pushed\n84ff92691f90: Pushed\nd72a74c56330: Pushed\nlatest: digest: sha256:b7074c024bfa691255788566b768a3f3cb0b4bc8e2e0062cb8d6dbd0c617749a size: 945\n\n\n\nDeploy CRDS\n\n\n$ make install\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n/home/serge/go/bin/kustomize build config/crd | kubectl apply -f -\ncustomresourcedefinition.apiextensions.k8s.io/memcacheds.cache.example.com created\n\n\n\nCheck the operator\n\n\n$ kubectl api-resources | grep memcached\nmemcacheds                                     cache.example.com              true         Memcached\n\n\nCheck CRDS\n\n\n$ kubectl describe crds memcacheds\n\n\nRunning the Operator\n\n\n$ make deploy IMG=nonstandardlogic/memcached-operator\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\ncd config/manager && /home/serge/go/bin/kustomize edit set image controller=nonstandardlogic/memcached-operator\n/home/serge/go/bin/kustomize build config/default | kubectl apply -f -\nnamespace/memcached-operator-system created\ncustomresourcedefinition.apiextensions.k8s.io/memcacheds.cache.example.com configured\nrole.rbac.authorization.k8s.io/memcached-operator-leader-election-role created\nclusterrole.rbac.authorization.k8s.io/memcached-operator-manager-role created\nclusterrole.rbac.authorization.k8s.io/memcached-operator-proxy-role created\nclusterrole.rbac.authorization.k8s.io/memcached-operator-metrics-reader created\nrolebinding.rbac.authorization.k8s.io/memcached-operator-leader-election-rolebinding created\nclusterrolebinding.rbac.authorization.k8s.io/memcached-operator-manager-rolebinding created\nclusterrolebinding.rbac.authorization.k8s.io/memcached-operator-proxy-rolebinding created\nservice/memcached-operator-controller-manager-metrics-service created\ndeployment.apps/memcached-operator-controller-manager created\n\n\n\nCheck Operator namespace\n\n\n$ kubectl get pods -n memcached-operator-system\nNAME                                                     READY   STATUS    RESTARTS   AGE\nmemcached-operator-controller-manager-686dcfc75d-dvtnm   2/2     Running   0          95s\n\n\n\nCheck Operator logs\n\n\n$ kubectl logs deployment.apps/memcached-operator-controller-manager -n memcached-operator-system -c manager\n\n\n\nApply example CR\n\n\n$ kubectl apply -f config/samples/cache_v1_memcached.yaml -n memcached-operator-system\nmemcached.cache.example.com/memcached-sample created\n\n\n\nCheck resources\n\n\n$ kubectl get all -n memcached-operator-system\nNAME                                                         READY   STATUS    RESTARTS   AGE\npod/memcached-operator-controller-manager-686dcfc75d-dvtnm   2/2     Running   0          4m1s\npod/memcached-sample-9b765dfc8-2pwsm                         1/1     Running   0          93s\n\nNAME                                                            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/memcached-operator-controller-manager-metrics-service   ClusterIP   10.109.157.125   <none>        8443/TCP   4m1s\n\nNAME                                                    READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/memcached-operator-controller-manager   1/1     1            1           4m1s\ndeployment.apps/memcached-sample                        1/1     1            1           93s\n\nNAME                                                               DESIRED   CURRENT   READY   AGE\nreplicaset.apps/memcached-operator-controller-manager-686dcfc75d   1         1         1       4m1s\nreplicaset.apps/memcached-sample-9b765dfc8                         1         1         1       93s\n\n\n\nCleanup resources\n\n\nNow, you can cleanup all by running to delete the CR:\n\n\n$ kubectl delete -f config/samples/cache_v1_memcached.yaml\n\n\n\nCleanup resources\n\n\nUninstall all operator\u2019s resources and its CRDs:\n\n\n$ kustomize build config/default | kubectl delete -f -",
            "title": "Memcache Kubernetes Operator"
        },
        {
            "location": "/articles/k8s-memcached-operator/#create-project",
            "text": "$ mkdir $GOPATH/src/github.com/nonstandardlogic\n$ mkdir $GOPATH/src/github.com/nonstandardlogic/memcached-operator\n$ cd  $GOPATH/src/github.com/memcached-operator\n\n$ operator-sdk init --domain=example.com\nError: failed to initialize project with version \"3-alpha\": error finding current repository: could not determine repository path from module data, package data, or by initializing a module: go: cannot determine module path for source directory /home/serge/go/memcached-operator (outside GOPATH, module path must be specified)  Example usage:\n        'go mod init example.com/m' to initialize a v0 or v1 module\n        'go mod init example.com/m/v2' to initialize a v2 module  Then  $ go mod init example.com/m/v2\ngo: creating new go.mod: module example.com/m/v2  Create the project  $ operator-sdk init --domain example.com --license apache2 --owner \"NSL Team\"\nWriting scaffold for you to edit...\nGet controller runtime:\n$ go get sigs.k8s.io/controller-runtime@v0.6.2\nUpdate go.mod:\n$ go mod tidy\nRunning make:\n$ make\n/home/serge/go/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\ngo build -o bin/manager main.go\nNext: define a resource with:\n$ operator-sdk create api",
            "title": "Create Project"
        },
        {
            "location": "/articles/k8s-memcached-operator/#create-api",
            "text": "$ operator-sdk create api --group cache --version v1 --kind Memcached --resource=true --controller=true\nWriting scaffold for you to edit...\napi/v1/memcached_types.go\ncontrollers/memcached_controller.go\nRunning make:\n$ make\n/home/serge/go/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\ngo build -o bin/manager main.go\n\n\n$ make manifests\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases",
            "title": "Create API"
        },
        {
            "location": "/articles/k8s-memcached-operator/#install-kubebuilder",
            "text": "( https://book.kubebuilder.io/quick-start.html)  s$ os=$(go env GOOS)\n$ arch=$(go env GOARCH)\n$ curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                Dload  Upload   Total   Spent    Left  Speed\n100    68  100    68    0     0    163      0 --:--:-- --:--:-- --:--:--   163\n100   124  100   124    0     0    272      0 --:--:-- --:--:-- --:--:--   272\n100   649  100   649    0     0    719      0 --:--:-- --:--:-- --:--:--  2021\n100 54.8M  100 54.8M    0     0  3701k      0  0:00:15  0:00:15 --:--:-- 4395k\n\n$ sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder\n$ export PATH=$PATH:/usr/local/kubebuilder/bin",
            "title": "Install Kubebuilder"
        },
        {
            "location": "/articles/k8s-memcached-operator/#api-definition",
            "text": "Update the api/v1alpha1/memcached_types.go file:\n    // MemcachedSpec defines the desired state of Memcached\n    type MemcachedSpec struct {\n        // +kubebuilder:validation:Minimum=0\n        // Size is the size of the memcached deployment\n        Size int32  json:\"size\" \n    }  // MemcachedStatus defines the observed state of Memcached\ntype MemcachedStatus struct {\n    // Nodes are the names of the memcached pods\n    Nodes []string `json:\"nodes\"`\n}",
            "title": "API Definition"
        },
        {
            "location": "/articles/k8s-memcached-operator/#generate-crd",
            "text": "$ make manifests\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases",
            "title": "Generate CRD"
        },
        {
            "location": "/articles/k8s-memcached-operator/#update-cr",
            "text": "update the CR sample in  config/samples/cache_v1_memcached.yaml  to set the attribute defined:  apiVersion: cache.example.com/v1\nkind: Memcached\nmetadata:\nname: memcached-sample\nspec:\n# Add fields here\nsize: 1",
            "title": "Update CR"
        },
        {
            "location": "/articles/k8s-memcached-operator/#building-and-pushing-to-docker-registry",
            "text": "$ make docker-build docker-push IMG=nonstandardlogic/memcached-operator\n/home/serge/go/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\ngo test ./... -coverprofile cover.out\n?       github.com/nonstandardlogic/memcached-operator  [no test files]\n?       github.com/nonstandardlogic/memcached-operator/api/v1   [no test files]\nok      github.com/nonstandardlogic/memcached-operator/controllers      5.131s  coverage: 0.0% of statements\ndocker build . -t nonstandardlogic/memcached-operator\nSending build context to Docker daemon  44.48MB\nStep 1/14 : FROM golang:1.13 as builder\n---> d6f3656320fe\nStep 2/14 : WORKDIR /workspace\n...\n1d44b27e08d8: Pushed\n84ff92691f90: Pushed\nd72a74c56330: Pushed\nlatest: digest: sha256:b7074c024bfa691255788566b768a3f3cb0b4bc8e2e0062cb8d6dbd0c617749a size: 945",
            "title": "Building and pushing to Docker registry"
        },
        {
            "location": "/articles/k8s-memcached-operator/#deploy-crds",
            "text": "$ make install\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n/home/serge/go/bin/kustomize build config/crd | kubectl apply -f -\ncustomresourcedefinition.apiextensions.k8s.io/memcacheds.cache.example.com created",
            "title": "Deploy CRDS"
        },
        {
            "location": "/articles/k8s-memcached-operator/#check-the-operator",
            "text": "$ kubectl api-resources | grep memcached\nmemcacheds                                     cache.example.com              true         Memcached",
            "title": "Check the operator"
        },
        {
            "location": "/articles/k8s-memcached-operator/#check-crds",
            "text": "$ kubectl describe crds memcacheds",
            "title": "Check CRDS"
        },
        {
            "location": "/articles/k8s-memcached-operator/#running-the-operator",
            "text": "$ make deploy IMG=nonstandardlogic/memcached-operator\n/home/serge/go/bin/controller-gen \"crd:trivialVersions=true\" rbac:roleName=manager-role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\ncd config/manager && /home/serge/go/bin/kustomize edit set image controller=nonstandardlogic/memcached-operator\n/home/serge/go/bin/kustomize build config/default | kubectl apply -f -\nnamespace/memcached-operator-system created\ncustomresourcedefinition.apiextensions.k8s.io/memcacheds.cache.example.com configured\nrole.rbac.authorization.k8s.io/memcached-operator-leader-election-role created\nclusterrole.rbac.authorization.k8s.io/memcached-operator-manager-role created\nclusterrole.rbac.authorization.k8s.io/memcached-operator-proxy-role created\nclusterrole.rbac.authorization.k8s.io/memcached-operator-metrics-reader created\nrolebinding.rbac.authorization.k8s.io/memcached-operator-leader-election-rolebinding created\nclusterrolebinding.rbac.authorization.k8s.io/memcached-operator-manager-rolebinding created\nclusterrolebinding.rbac.authorization.k8s.io/memcached-operator-proxy-rolebinding created\nservice/memcached-operator-controller-manager-metrics-service created\ndeployment.apps/memcached-operator-controller-manager created",
            "title": "Running the Operator"
        },
        {
            "location": "/articles/k8s-memcached-operator/#check-operator-namespace",
            "text": "$ kubectl get pods -n memcached-operator-system\nNAME                                                     READY   STATUS    RESTARTS   AGE\nmemcached-operator-controller-manager-686dcfc75d-dvtnm   2/2     Running   0          95s",
            "title": "Check Operator namespace"
        },
        {
            "location": "/articles/k8s-memcached-operator/#check-operator-logs",
            "text": "$ kubectl logs deployment.apps/memcached-operator-controller-manager -n memcached-operator-system -c manager",
            "title": "Check Operator logs"
        },
        {
            "location": "/articles/k8s-memcached-operator/#apply-example-cr",
            "text": "$ kubectl apply -f config/samples/cache_v1_memcached.yaml -n memcached-operator-system\nmemcached.cache.example.com/memcached-sample created",
            "title": "Apply example CR"
        },
        {
            "location": "/articles/k8s-memcached-operator/#check-resources",
            "text": "$ kubectl get all -n memcached-operator-system\nNAME                                                         READY   STATUS    RESTARTS   AGE\npod/memcached-operator-controller-manager-686dcfc75d-dvtnm   2/2     Running   0          4m1s\npod/memcached-sample-9b765dfc8-2pwsm                         1/1     Running   0          93s\n\nNAME                                                            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/memcached-operator-controller-manager-metrics-service   ClusterIP   10.109.157.125   <none>        8443/TCP   4m1s\n\nNAME                                                    READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/memcached-operator-controller-manager   1/1     1            1           4m1s\ndeployment.apps/memcached-sample                        1/1     1            1           93s\n\nNAME                                                               DESIRED   CURRENT   READY   AGE\nreplicaset.apps/memcached-operator-controller-manager-686dcfc75d   1         1         1       4m1s\nreplicaset.apps/memcached-sample-9b765dfc8                         1         1         1       93s",
            "title": "Check resources"
        },
        {
            "location": "/articles/k8s-memcached-operator/#cleanup-resources",
            "text": "Now, you can cleanup all by running to delete the CR:  $ kubectl delete -f config/samples/cache_v1_memcached.yaml",
            "title": "Cleanup resources"
        },
        {
            "location": "/articles/k8s-memcached-operator/#cleanup-resources_1",
            "text": "Uninstall all operator\u2019s resources and its CRDs:  $ kustomize build config/default | kubectl delete -f -",
            "title": "Cleanup resources"
        }
    ]
}